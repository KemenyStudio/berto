name: Build and Release Electron Apps

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NODE_ENV: production
      CI: true
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Checkout LFS objects
      run: git lfs checkout
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
        
    - name: Configure pnpm
      run: |
        pnpm config set store-dir ~/.pnpm-store
        
    - name: Install dependencies
      run: |
        pnpm install --frozen-lockfile
        
    - name: Debug build environment
      run: |
        echo "Node version: $(node --version)"
        echo "npm version: $(npm --version)"  
        echo "pnpm version: $(pnpm --version)"
        echo "Electron version: $(pnpm list electron --depth=0 2>/dev/null || echo 'Not found')"
        ls -la public/ || echo "No public directory"
      
    - name: Build Electron App (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pnpm run build-static
        pnpm run electron-builder -- --win --publish never
        
    - name: Build Electron App (macOS)
      if: matrix.os == 'macos-latest'
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
      run: |
        pnpm run build-static
        pnpm run electron-builder -- --mac --publish never
        
    - name: Build Electron App (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pnpm run build-static
        pnpm run electron-builder -- --linux --publish never
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-${{ matrix.os }}
        path: dist/
        retention-days: 30
        
  deploy-binaries:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Git LFS
      run: git lfs install
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Setup binaries for LFS
      run: |
        mkdir -p public/downloads
        
        # Copy Windows binary if exists
        if [ -d "electron-windows-latest" ]; then
          find electron-windows-latest -name "*.exe" -exec cp {} public/downloads/berto-windows.exe \;
        fi
        
        # Copy macOS binary if exists  
        if [ -d "electron-macos-latest" ]; then
          find electron-macos-latest -name "*.dmg" -exec cp {} public/downloads/berto-mac.dmg \;
        fi
        
        # Copy Linux binary if exists
        if [ -d "electron-ubuntu-latest" ]; then
          find electron-ubuntu-latest -name "*.AppImage" -exec cp {} public/downloads/berto-linux.AppImage \;
        fi
        
        # Track with LFS
        git lfs track "public/downloads/*.exe"
        git lfs track "public/downloads/*.dmg"
        git lfs track "public/downloads/*.AppImage"
        
    - name: Commit and push LFS files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .gitattributes
        git add public/downloads/
        
        if ! git diff --staged --quiet; then
          git commit -m "Update Electron builds [skip ci]"
          git push
        else
          echo "No changes to commit"
        fi
        
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          electron-windows-latest/**/*.exe
          electron-macos-latest/**/*.dmg
          electron-ubuntu-latest/**/*.AppImage
        generate_release_notes: true 